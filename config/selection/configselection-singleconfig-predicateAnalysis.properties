# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# The specification to check in SV-COMP'21
specification = ../specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
termination.violation.witness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms = true

# Specifics for predicate analysis ----

#include ../predicateAnalysis-PredAbsRefiner-ABEl.properties

# ************** SV-COMP'21 specifics ***********************

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.pointer2.PointerCPA

cpa.callstack.skipVoidRecursion = true

# -------------------------------------
# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipFunctionPointerRecursion = true

# define unsupported functions globally, the nested concurrency analysis overrides this option
cpa.callstack.unsupportedFunctions=pthread_create,pthread_key_create,sin,cos,__builtin_uaddl_overflow

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true
